#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

struct qhash
{
    static uint64_t splitmix64(uint64_t x)
    {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x)
        const
    {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

typedef long long ll;
typedef bool bl;
typedef string str;
typedef unsigned long long ull;
typedef double db;

#define fi first
#define se second
#define mp(p1, p2) make_pair(p1, p2)
#define f(i, n) for (ll i = 0; i < n; i += 1)
#define fv(i, v) for (typeof(v.begin()) i = v.begin(); i != v.end(); i++)
#define fu(i, start, end) for (int i = start; i < end; i += 1)
#define fd(i, start, end) for (int i = start; i >= end; i -= 1)
#define BIT(var, pos) ((bool)((var) & (1 << (pos))))
#define pb push_back
#define ordered_set tree<pair<ll, ll>, null_type, less<pair<ll, ll>>, rb_tree_tag, tree_order_statistics_node_update>

#define MOD 1000000007

ll n;
ll st[400001];
ll idx[200001];
ll num[100001];
ll get_num[100001];
ll id = 0;
vector<vector<int>>adj(100001);
vector<int>tour;
void dfs(ll i, ll prev) {
    num[i] = id++; 
    get_num[num[i]] = i;
    tour.push_back(num[i]);
    for (auto val : adj[i]) {
        if (val != prev) {
            dfs(val, i);
            tour.push_back(num[i]);
        }
    }
}
void build() {
    fd(i, n - 1, 1) {
        st[i] = min(st[i << 1], st[i << 1 | 1]);
    }
}
ll query(ll l, ll r) {
    ll res = LLONG_MAX;
    for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
        if (l & 1) res = min(res, st[l++]);
        if (r & 1) res = min(res, st[--r]);
    }
    return res;
}
void solve() {
    ll m, a, b;
    cin >> n >> m;
    f(i, n - 1) {
        cin >> a;
        adj[a].push_back(i + 2);
    }
    dfs(1, 0);
    n = tour.size();
    f(i, n) {st[i + n] = tour[i]; if (!idx[tour[i]]) idx[tour[i]] = i;}
    build();
    f(i, m) {
        cin >> a >> b;
        if (idx[num[a]] > idx[num[b]]) swap(a, b);
        cout << get_num[query(idx[num[a]], idx[num[b]] + 1)] << '\n';
    }
}
int main()
{
    // freopen("pushing.INP", "r" ,stdin); freopen("pushing.OUT", "w", stdout);
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    long long test = 1;

    // cin >> test;
    for (int i = 0; i < test; i += 1)
    {
        solve();
    }
    return 0;
}
